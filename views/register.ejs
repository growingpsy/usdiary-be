<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>회원가입</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        form {
            max-width: 400px;
            margin: 0 auto;
        }
        label {
            display: block;
            margin-top: 10px;
        }
        input, select, button {
            width: 100%;
            padding: 10px;
            margin-top: 5px;
        }
        .button-group {
            display: flex;
            justify-content: space-between;
        }
        .button-group button {
            width: 48%;
        }
        #verification-section {
            display: none;
            margin-top: 15px;
        }
        #timer {
            font-size: 1.2em;
            color: red;
            margin-top: 10px;
        }
        .message {
            font-size: 0.9em;
            transition: color 0.3s ease;
        }
        .message.valid {
            color: green;
        }
        .message.error {
            color: red;
        }

    </style>
</head>
<body>
    <h1>회원가입</h1>
    <form id="registerForm">
        <label for="username">이름:</label>
        <input type="text" id="username" name="username" value="<%= typeof name !== 'undefined' ? name : '' %>" required>
        
        <label for="id">아이디:</label>
        <div class="button-group">
            <input type="text" id="id" name="id" value="<%= typeof username !== 'undefined' ? username : '' %>" required>
            <button type="button" onclick="checkId()">중복 확인</button>
        </div>
        <label for="nickname">닉네임:</label>
        <div class="button-group">
            <input type="text" id="nickname" name="nickname" required>
            <button type="button" onclick="checkNickname()">중복 확인</button>
        </div>

        <label for="password">비밀번호:</label>
        <input type="password" id="password" name="password" required pattern="(?=.*\W).{6,15}" title="비밀번호는 특수문자를 포함한 6~15자여야 합니다.">

        <label for="confirm-password">비밀번호 확인:</label>
        <input type="password" id="confirm-password" name="confirm-password" required>
        <p id="password-message" class="message"></p>

        <label for="email">이메일:</label>
        <div class="button-group">
            <input type="email" id="email" name="email" value="<%= typeof email !== 'undefined' ? email : '' %>" required>
            <button type="button" onclick="sendVerificationEmail()">이메일 인증</button>
        </div>
        <div id="verification-section">
            <label for="verification-code">인증번호:</label>
            <input type="text" id="verification-code" name="verification-code">
            <button type="button" onclick="verifyCode()">인증번호 확인</button>
            <p id="timer"></p>
            <p id="verification-message"></p>
        </div>

        <label for="phone">전화번호:</label>
        <input type="tel" id="phone" name="phone" value="<%= typeof phone !== 'undefined' ? phone : '' %>" required>

        <label for="birthdate">생일:</label>
        <input type="date" id="birthdate" name="birthdate" value="<%= typeof birthdate !== 'undefined' ? birthdate : '' %>" required>

        <label for="gender">성별:</label>
        <select id="gender" name="gender" required>
            <option value="male" <%= typeof gender !== 'undefined' && gender === 'male' ? 'selected' : '' %>>남성</option>
            <option value="female" <%= typeof gender !== 'undefined' && gender === 'female' ? 'selected' : '' %>>여성</option>
        </select>

        <button type="submit" id="submit-btn">회원가입</button>
    </form>

    <script>
        // 비밀번호 확인 로직 유지
        document.getElementById('confirm-password').addEventListener('input', function() {
    const password = document.getElementById('password').value;
    const confirmPassword = this.value;
    const message = document.getElementById('password-message');

    if (confirmPassword === password) {
        message.textContent = '비밀번호가 일치합니다.';
        message.classList.add('valid');
        message.classList.remove('error');
    } else {
        message.textContent = '비밀번호가 일치하지 않습니다.';
        message.classList.add('error');
        message.classList.remove('valid');
    }
});

const BASE_URL = '<%= BASE_URL %>'; 
let isIdChecked = false;
let isNicknameChecked = false;
let isEmailVerified = false;

function checkId() {
    const id = document.getElementById('id').value;
    if (!id) {
        alert('아이디를 입력하세요.');
        return;
    }

    fetch(`${BASE_URL}/api/users/idcheck?uid=${encodeURIComponent(id)}`)
        .then(response => response.json())
        .then(data => {
            if (data.message === '사용 가능한 아이디입니다.') {
                isIdChecked = true;
                alert('사용 가능한 아이디입니다.');
            } else {
                isIdChecked = false;
                alert('이미 중복된 아이디가 있습니다.');
            }
        })
        .catch(error => {
            console.error('아이디 중복 확인 오류:', error);
            alert('아이디 중복 확인 중 문제가 발생했습니다.');
        });
}

function checkNickname() {
    const nickname = document.getElementById('nickname').value;
    if (!nickname) {
        alert('닉네임을 입력하세요.');
        return;
    }

    fetch(`${BASE_URL}/api/users/nicknamecheck?unick=${encodeURIComponent(nickname)}`)
        .then(response => response.json())
        .then(data => {
            if (data.message === '사용 가능한 닉네임입니다.') {
                isNicknameChecked = true;
                alert('사용 가능한 닉네임입니다.');
            } else {
                isNicknameChecked = false;
                alert('이미 사용 중인 닉네임입니다.');
            }
        })
        .catch(error => {
            console.error('닉네임 중복 확인 오류:', error);
            alert('닉네임 중복 확인 중 문제가 발생했습니다.');
        });
}

function sendVerificationEmail() {
    const email = document.getElementById('email').value;
    if (!email) {
        alert('이메일을 입력하세요.');
        return;
    }

    fetch(`${BASE_URL}/api/users/send-verification-code`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email })
    })
    .then(response => response.json())
    .then(data => {
        alert(data.message);
        if (data.message === '이메일을 확인하세요.') {
            document.getElementById('verification-section').style.display = 'block';
            startTimer(3 * 60); // 3분 타이머 시작
        }
    })
    .catch(error => {
        console.error('이메일 인증 오류:', error);
        alert('이메일 인증 중 문제가 발생했습니다.');
    });
}

function startTimer(duration) {
    let timer = duration;
    const display = document.getElementById('timer');
    const interval = setInterval(() => {
        const minutes = String(Math.floor(timer / 60)).padStart(2, '0');
        const seconds = String(timer % 60).padStart(2, '0');

        display.textContent = `${minutes}:${seconds}`;

        if (--timer < 0) {
            clearInterval(interval);
            alert('인증 시간이 만료되었습니다.');
            document.getElementById('verification-section').style.display = 'none';
            isEmailVerified = false;
        }
    }, 1000);
}

function verifyCode() {
    const email = document.getElementById('email').value;
    const verificationCode = document.getElementById('verification-code').value;

    if (!email || !verificationCode) {
        alert('이메일과 인증번호를 입력하세요.');
        return;
    }

    fetch(`${BASE_URL}/api/users/verify-code`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, verificationCode })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            isEmailVerified = true;
            document.getElementById('verification-message').textContent = '이메일 인증이 완료되었습니다!';
            document.getElementById('verification-message').style.color = 'green';
        } else {
            document.getElementById('verification-message').textContent = '인증번호가 일치하지 않습니다.';
            document.getElementById('verification-message').style.color = 'red';
        }
    })
    .catch(error => {
        console.error('인증번호 확인 오류:', error);
        alert('인증번호 확인 중 문제가 발생했습니다.');
    });
}

document.getElementById('registerForm').addEventListener('submit', function(event) {
    event.preventDefault(); // 폼의 기본 제출 방지

    const password = document.getElementById('password').value;
    const confirmPassword = document.getElementById('confirm-password').value;

    if (password !== confirmPassword) {
        alert('비밀번호가 일치하지 않습니다.');
        return;
    }

    if (!isIdChecked) {
        alert('아이디 중복 확인을 완료해야 합니다.');
        return;
    }

    if (!isNicknameChecked) {
        alert('닉네임 중복 확인을 완료해야 합니다.');
        return;
    }

    if (!isEmailVerified) {
        alert('이메일 인증을 완료해야 합니다.');
        return;
    }

    // 모든 조건이 만족된 경우 폼 제출
    fetch(`${BASE_URL}/api/users/register`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            id: document.getElementById('id').value,
            username: document.getElementById('username').value,
            nickname: document.getElementById('nickname').value,
            password: document.getElementById('password').value,
            email: document.getElementById('email').value,
            phone: document.getElementById('phone').value,
            birthdate: document.getElementById('birthdate').value,
            gender: document.getElementById('gender').value,
            verificationCode: document.getElementById('verification-code').value
        })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('네트워크 응답이 실패했습니다.');
        }
        return response.json();
    })
    .then(data => {
        if (data.message === '회원가입이 완료되었습니다.') {
            alert('회원가입이 완료되었습니다.');
            window.location.href = '/login'; // 로그인 페이지로 리디렉션
        } else {
            alert(data.message);
        }
    })
    .catch(error => {
        console.error('회원가입 오류:', error);
        alert('회원가입 중 문제가 발생했습니다.');
    });
});

    </script>
</body>
</html>
